# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  access_token: String!
}

type User {
  id: Int!
  email: String
  username: String!
  password: String!
  role: role!
}

enum role {
  Admin
  Analyst
  Auditor
}

type SecurityEvent {
  id: String
  dataSource: String!
  destinationIP: String!
  eventType: String!
  message: String!
  severity: Severity!
  sourceIP: String!
  timestamp: String!
  user: String!
}

enum Severity {
  Low
  Medium
  High
}

type CountSecurityEvents {
  count: Int!
}

type Rule {
  id: Int!
  condition: String!
  name: String!
  actions: String!
  description: String!
}

type DataSource {
  id: Int!
  name: String!
  type: String!
  description: String!
}

type Alert {
  """Example field (placeholder)"""
  exampleField: Int!
}

type UserGroup {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Query {
  user(id: Int!): User!
  getAllSecurityEvents: [SecurityEvent!]!
  getSecurityEventById(id: String!): [SecurityEvent!]!
  getTotalCountSecurityEvents: CountSecurityEvents!
  getSecurityEventsByIP(ip: String!): [SecurityEvent!]!
  getSecurityEventsByEventType(eventType: String!): [SecurityEvent!]!
  getSecurityEventsByDataSource(dataSource: String!): [SecurityEvent!]!
  getSecurityEventsByTimeRange(startDate: DateTime!, endDate: DateTime!): [SecurityEvent!]!
  getSecurityEventsByDestinationIP(destinationIP: String!): [SecurityEvent!]!
  getSecurityEventsByUser(user: String!): [SecurityEvent!]!
  getSecurityEventsBySeverity(severity: Severity!): [SecurityEvent!]!
  getSecurityEventsByTimestampSorting(sort: String!): [SecurityEvent!]!
  getSecurityEventsBySeverityAndOrder(severity: String!, sort: String!): [SecurityEvent!]!
  getSecurityEventsCountBySeverity(severity: Severity!): CountSecurityEvents!
  getSecurityEventsCountByEventType(eventType: String!): CountSecurityEvents!
  getSecurityEventsCountByUser(user: String!): CountSecurityEvents!
  getSecurityEventsCountByIP(ip: String!): CountSecurityEvents!
  getSecurityEventsCountByTimeRage(startDate: DateTime!, endDate: DateTime!): CountSecurityEvents!
  getSecurityEventsCountByDataSource(dataSource: String!): [SecurityEvent!]!

  """Get the least common event types in the last 7 days"""
  getCommonEventTypesLast7Day(eventType: String!): [SecurityEvent!]!

  """Get security events for a specific data source within a time range"""
  getSecurityEventsByDataSourceATimeRange(dataSource: String!, startDate: DateTime!, endDate: DateTime!): [SecurityEvent!]!

  """Get security events generated by a specific process or application."""
  getSecurityEventsByApplication(application: String!): [SecurityEvent!]!
  getCommonAttackTypesIn24H(limit: Int!): [SecurityEvent!]!

  """Get security events for a specific user within a time range"""
  getSecurityEventsByUserATimeRange(user: String!, startDate: DateTime!, endDate: DateTime!): [SecurityEvent!]!

  """Get security events that match a specific regular expression pattern."""
  getSecurityEventsByPattern(key: String!, pattern: String!): [SecurityEvent!]!

  """Get security events for a specific user and data source"""
  getSecurityEventsByUserAndDataSource(user: String!, dataSource: String!): [SecurityEvent!]!
  rules: [Rule!]!
  rule(id: Int!): Rule!
  dataSource(id: Int!): DataSource!
  alerts: [Alert!]!
  alert(id: Int!): Alert!
  userGroup(id: Int!): UserGroup!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  login(loginInput: LoginInput!): AuthPayload!
  changePassword(changePasswordInput: ChangePasswordInput!): User!

  """Acknowledge and Dismiss all alerts for a specific user"""
  enableOrDisableAlertsUser(id: Float!, receive: Boolean!): User!

  """Revoke a role from a user"""
  revokeRole(id: Int!): User!
  createUser(createUserInput: CreateUserInput!): User!
  assignRoleUser(assignRoleUserInput: AssignRoleUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createSecurityEvent(createSecurityEventInput: CreateSecurityEventInput!): SecurityEvent!
  updateSecurityEvent(updateSecurityEventInput: UpdateSecurityEventInput!): SecurityEvent!
  deleteSecurityEvent(id: String!): SecurityEvent!
  suspendRealTimeMonitoring: Boolean!
  resumeRealTimeMonitoring: Boolean!
  createRule(createRuleInput: CreateRuleInput!): Rule!
  updateRule(updateRuleInput: UpdateRuleInput!): Rule!
  removeRule(id: Int!): Rule!
  createDataSource(createDataSourceInput: CreateDataSourceInput!): DataSource!
  updateDataSource(updateDataSourceInput: UpdateDataSourceInput!): DataSource!
  removeDataSource(id: Int!): DataSource!
  createAlert(createAlertInput: CreateAlertInput!): Alert!
  removeAlert(id: Int!): Alert!
  createUserGroup(createUserGroupInput: CreateUserGroupInput!): UserGroup!
  updateUserGroup(updateUserGroupInput: UpdateUserGroupInput!): UserGroup!
  removeUserGroup(id: Int!): UserGroup!
}

input LoginInput {
  username: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
  passwordConfirm: String!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  role: role!
}

input AssignRoleUserInput {
  userId: Int!
  role: role!
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  role: role
  id: Int!
}

input CreateSecurityEventInput {
  dataSource: String!
  destinationIP: String!
  eventType: String!
  message: String!
  severity: Severity!
  sourceIP: String!
  timestamp: String
  user: String!
  id: String
}

input UpdateSecurityEventInput {
  dataSource: String
  destinationIP: String
  eventType: String
  message: String
  severity: Severity
  sourceIP: String
  timestamp: String
  user: String
  id: String!
}

input CreateRuleInput {
  name: String!
  description: String!
  condition: String!
  actions: String!
}

input UpdateRuleInput {
  name: String
  description: String
  condition: String
  actions: String
  id: Int!
}

input CreateDataSourceInput {
  name: String!
  type: String!
  description: String!
}

input UpdateDataSourceInput {
  name: String
  type: String
  description: String
  id: Int!
}

input CreateAlertInput {
  acknowledged: Boolean!
  dismissed: Boolean!
  id: String!
}

input CreateUserGroupInput {
  name: String!
  userId: Int!
  permissions: [String!]!
}

input UpdateUserGroupInput {
  name: String
  userId: Int
  permissions: [String!]
  id: Int!
}

type Subscription {
  newSecurityEvent: SecurityEvent!
  newSecurityAlert: Alert!
}